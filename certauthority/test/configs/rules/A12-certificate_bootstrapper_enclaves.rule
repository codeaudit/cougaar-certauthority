#!/usr/bin/ruby
####################################################
# certificate_bootstrapper_enclaves.rule

society.each_node do |node|
  enclave = nil
  arg = nil
  arg1 = nil
  certAuthority = false
  
  node.each_facet(:role) do |facet|
    if facet[:role] == $facetRootCaManagerAgent \
     or facet[:role] == $facetCaManagerAgent \
     or facet[:role] == $facetRedundantRootCaManagerAgent \
     or facet[:role] == $facetRedundantCaManagerAgent
      certAuthority = true
    end
  end

  if not certAuthority

    enclave = node.host.get_facet(:enclave).capitalize
    caAgent = nil
    redundantCa = nil

    # Search the CA managing this node.
    society.each_agent do |agent|
      # First, the agent needs to be in the same enclave
      if (agent.node.host.get_facet(:enclave) == node.host.get_facet(:enclave))
        # Second, the agent must be a CA
	agent.each_facet("catype") do |caFacet|
	  if caFacet["catype"] == $facetCaManagerAgent
	    caAgent = agent
	  end
	  if caFacet["catype"] == $facetRedundantCaManagerAgent
	    redundantCa = agent
	  end
	  if redundantCa != nil && caAgent != nil
	    break
	  end
	end
      end
    end
    if caAgent == nil
      # No CA was found. Try to use a Root CA.
      # This is for the case when only one CA has been configured.
      society.each_agent do |agent|
	agent.each_facet("catype") do |caFacet|
	  if caFacet["catype"] == $facetRootCaManagerAgent
	    caAgent = agent
            break
          end
        end
      end
    end

    if caAgent != nil
      arg = "#{caAgent.node.host.name}:#{caAgent.name}:" +
            "#{caAgent.node.cougaar_port}:#{caAgent.node.secure_cougaar_port}"
    end
    if redundantCa != nil
      arg1 = "#{redundantCa.node.host.name}:#{redundantCa.name}:" +
             "#{redundantCa.node.cougaar_port}:#{redundantCa.node.secure_cougaar_port}"
    end
   
    if arg != nil || arg1 != nil
      if node.agent.has_component?("org.cougaar.core.security.provider.SecurityComponentFactory") 
        # This is to ensure AutoConfigPlugin is installed AFTER SecurityComponentFactgory
        node.agent.add_component do |c|
          c.classname = "org.cougaar.core.security.crypto.AutoConfigPlugin"
          c.priority = "HIGH"
          c.insertionpoint = "Node.AgentManager.Agent.SecurityComponent"
          if (arg != nil)
            c.add_argument(arg)
          end
          if (arg1 != nil)
            c.add_argument(arg1)
          end
        end # node.agent.add_component
      end # if (node.agent.has_component?
    end # if arg != nil
  end # if not certauthority
end

